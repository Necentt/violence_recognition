#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –Ω–∞—Å–∏–ª–∏—è
"""

import time
import psutil
import requests
import json
from datetime import datetime

def get_system_info():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ"""
    cpu_percent = psutil.cpu_percent(interval=1)
    memory = psutil.virtual_memory()
    disk = psutil.disk_usage('/')
    
    return {
        'cpu_percent': cpu_percent,
        'memory_percent': memory.percent,
        'memory_used_gb': memory.used / (1024**3),
        'memory_total_gb': memory.total / (1024**3),
        'disk_percent': disk.percent,
        'disk_free_gb': disk.free / (1024**3)
    }

def get_backend_status():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ backend"""
    try:
        response = requests.get('http://localhost:8003/api/status', timeout=5)
        if response.status_code == 200:
            return response.json()
        else:
            return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ backend: {e}")
        return None

def get_streams_info():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Ç–æ–∫–∞—Ö"""
    try:
        response = requests.get('http://localhost:8003/api/streams', timeout=5)
        if response.status_code == 200:
            return response.json()
        else:
            return []
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤: {e}")
        return []

def monitor_performance():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    print("üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –Ω–∞—Å–∏–ª–∏—è")
    print("=" * 80)
    
    while True:
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            system_info = get_system_info()
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ backend
            backend_status = get_backend_status()
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Ç–æ–∫–∞—Ö
            streams = get_streams_info()
            
            # –û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞ (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ)
            print("\033[2J\033[H")  # –û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞
            
            # –í—ã–≤–æ–¥ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            print(f"üïê –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            print("=" * 80)
            
            # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            print("üíª –°–ò–°–¢–ï–ú–ù–´–ï –†–ï–°–£–†–°–´:")
            print(f"   CPU: {system_info['cpu_percent']:.1f}%")
            print(f"   RAM: {system_info['memory_percent']:.1f}% ({system_info['memory_used_gb']:.1f}GB / {system_info['memory_total_gb']:.1f}GB)")
            print(f"   –î–∏—Å–∫: {system_info['disk_percent']:.1f}% (—Å–≤–æ–±–æ–¥–Ω–æ: {system_info['disk_free_gb']:.1f}GB)")
            
            # –°—Ç–∞—Ç—É—Å backend
            print("\nüîß BACKEND –°–¢–ê–¢–£–°:")
            if backend_status:
                print(f"   Triton Server: {'üü¢ –û–Ω–ª–∞–π–Ω' if backend_status.get('triton_server') else 'üî¥ –û—Ñ–ª–∞–π–Ω'}")
                print(f"   –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ—Ç–æ–∫–∏: {backend_status.get('active_streams', 0)}")
                print(f"   –í—Å–µ–≥–æ –ø–æ—Ç–æ–∫–æ–≤: {backend_status.get('total_streams', 0)}")
                uptime = backend_status.get('uptime', 0)
                hours = int(uptime // 3600)
                minutes = int((uptime % 3600) // 60)
                print(f"   –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {hours}—á {minutes}–º")
            else:
                print("   üî¥ Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Ç–æ–∫–∞—Ö
            print("\nüìπ –ü–û–¢–û–ö–ò:")
            if streams:
                total_fps = 0
                total_frames = 0
                total_detections = 0
                
                for stream in streams:
                    status = "üü¢" if stream.get('is_running') else "üî¥"
                    fps = stream.get('fps', 0)
                    frames = stream.get('total_frames', 0)
                    detections = stream.get('detection_count', 0)
                    
                    print(f"   {status} {stream.get('name', stream.get('id'))}: {fps:.1f} FPS, {frames} –∫–∞–¥—Ä–æ–≤, {detections} –¥–µ—Ç–µ–∫—Ü–∏–π")
                    
                    total_fps += fps
                    total_frames += frames
                    total_detections += detections
                
                print(f"\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
                print(f"   –°—Ä–µ–¥–Ω–∏–π FPS: {total_fps/len(streams):.1f}")
                print(f"   –í—Å–µ–≥–æ –∫–∞–¥—Ä–æ–≤: {total_frames}")
                print(f"   –í—Å–µ–≥–æ –¥–µ—Ç–µ–∫—Ü–∏–π: {total_detections}")
            else:
                print("   –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤")
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            if system_info['cpu_percent'] > 80:
                print("   ‚ö†Ô∏è  –í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ frame_skip")
            if system_info['memory_percent'] > 80:
                print("   ‚ö†Ô∏è  –í—ã—Å–æ–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ RAM - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏")
            if streams:
                avg_fps = sum(s.get('fps', 0) for s in streams) / len(streams)
                if avg_fps < 15:
                    print("   ‚ö†Ô∏è  –ù–∏–∑–∫–∏–π FPS - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
                if avg_fps > 25:
                    print("   ‚úÖ –•–æ—Ä–æ—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
            
            print("\n" + "=" * 80)
            print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞")
            
            # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
            time.sleep(5)
            
        except KeyboardInterrupt:
            print("\n\nüëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω")
            break
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            time.sleep(5)

if __name__ == "__main__":
    monitor_performance() 